name: DevSecOps CI (SAST/SCA/Secrets/Image + DAST gates)

on:
  push:
  pull_request:

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write

env:
  IMAGE_NAME: app:test
  ZAP_NET: scan
  ZAP_TARGET: http://app:3000
  ZAP_TIMEOUT: 300
  GATE_HIGH: "0"
  GATE_MED: "5"

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep ci --config=auto --sarif --output /src/semgrep.sarif \
            --error --timeout 0 || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
      - run: trivy fs --timeout 10m --format sarif --output trivy-fs.sarif --exit-code 0 .
      - run: syft dir:. -o spdx-json > sbom.spdx.json
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy_fs
          path: |
            trivy-fs.sarif
            sbom.spdx.json

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f sarif -r /repo/gitleaks.sarif \
            --report-format json --report-path /repo/gitleaks.json \
            --exit-code 0
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: |
            gitleaks.sarif
            gitleaks.json

  image_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t "${IMAGE_NAME}" .
      - run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          trivy image --timeout 10m --format sarif --output trivy-image.sarif --exit-code 0 "${IMAGE_NAME}"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: image_scan
          path: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, image_scan]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare network
        run: docker network create "${ZAP_NET}"

      - name: Run app container
        run: |
          docker build -t "${IMAGE_NAME}" .
          docker run -d --rm --name app --network "${ZAP_NET}" -p 3000:3000 "${IMAGE_NAME}"
          for i in $(seq 1 ${ZAP_TIMEOUT}); do
            if docker run --rm --network "${ZAP_NET}" curlimages/curl:8.9.1 -sSf http://app:3000 >/dev/null; then
              break
            fi
            sleep 1
          done

      - name: ZAP Baseline -> zap.json & zap.html (non-fatal, with fallback)
        run: |
          mkdir -p dast
          docker run --rm --network "${ZAP_NET}" -v "$PWD/dast:/zap/wrk" \
            ghcr.io/zaproxy/zap2docker-stable:latest \
            zap-baseline.py -t "${ZAP_TARGET}" -m 5 -J zap.json -r zap.html || true
          if [ ! -s dast/zap.json ]; then
            echo '{}' > dast/zap.json
          fi

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast
          path: dast/

      - name: Download ALL previous artifacts (merge)
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: Gate on DAST (fail if High>0 or Medium>5)
        run: |
          bash ci/gate.sh pre .
          bash ci/gate.sh dast "dast/zap.json" "${GATE_HIGH}" "${GATE_MED}"

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app || true
          docker network rm "${ZAP_NET}" || true
