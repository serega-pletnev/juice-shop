name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
  workflow_dispatch:

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: '20.19.x'
  IMAGE_NAME: juice-shop-ci:latest
  ZAP_IMAGE: ghcr.io/zaproxy/zaproxy:stable
  TRIVY_VER: '0.53.0'
  TRIVY_CACHE_DIR: ${{ github.workspace }}/.trivycache

# ────────────────────────────────────────────────────────────────────────────────
# 1) Базовый билд + простые проверки (Node)
# ────────────────────────────────────────────────────────────────────────────────
jobs:
  build_test:
    name: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      # lock-файл должен быть в репозитории (package-lock.json)
      - name: Install (npm ci)
        run: npm ci

      - name: Lint (best-effort)
        run: npm run lint -s || true

      - name: Unit tests (best-effort)
        run: npm test --if-present -s || true

# ────────────────────────────────────────────────────────────────────────────────
# 2) Semgrep → semgrep.sarif  (исправлено: запускаем бинарь "semgrep scan")
# ────────────────────────────────────────────────────────────────────────────────
  semgrep:
    name: semgrep
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      actions: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Semgrep scan → semgrep.sarif
        run: |
          docker run --rm \
            -v "$PWD":/src -w /src \
            semgrep/semgrep:1.67.0 \
            semgrep scan \
              --config auto \
              --timeout 1800 \
              --exclude node_modules \
              --exclude tests \
              --enable-metrics off \
              --sarif -o semgrep.sarif || true

          test -s semgrep.sarif || echo '{"version":"2.1.0","runs":[]}' > semgrep.sarif

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload semgrep.sarif (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif
          if-no-files-found: warn
          retention-days: 7

# ────────────────────────────────────────────────────────────────────────────────
# 3) Trivy FS + Syft SBOM → trivy-fs.sarif, sbom.spdx.json
# ────────────────────────────────────────────────────────────────────────────────
  trivy_fs_sbom:
    name: trivy_fs_sbom
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Prepare Trivy cache
        run: mkdir -p "${TRIVY_CACHE_DIR}"

      - name: Trivy FS → trivy-fs.sarif
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}
        run: |
          docker run --rm -v "$PWD":/src -w /src \
            -v "${TRIVY_CACHE_DIR}:/root/.cache/trivy" \
            aquasec/trivy:${TRIVY_VER} fs \
              --format sarif \
              --output trivy-fs.sarif \
              --no-progress \
              --timeout 10m \
              --skip-dirs node_modules \
              .

          test -s trivy-fs.sarif || echo '{"version":"2.1.0","runs":[]}' > trivy-fs.sarif

      - name: SBOM (Syft) → sbom.spdx.json
        run: |
          docker run --rm -v "$PWD":/src -w /src \
            anchore/syft:latest packages dir:/src \
            -o spdx-json > sbom.spdx.json || true
          test -s sbom.spdx.json || echo '{"spdxVersion":"SPDX-2.3","packages":[]}' > sbom.spdx.json

      - name: Upload trivy-fs.sarif to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Upload FS/SBOM (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-sbom
          path: |
            trivy-fs.sarif
            sbom.spdx.json
          if-no-files-found: warn
          retention-days: 7

# ────────────────────────────────────────────────────────────────────────────────
# 4) Gitleaks → gitleaks.json + gitleaks.sarif (два отчёта: для gate и для Security)
# ────────────────────────────────────────────────────────────────────────────────
  gitleaks:
    name: gitleaks
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      # Отчёт JSON — для gate.sh
      - name: Gitleaks → gitleaks.json
        run: |
          docker run --rm -v "$PWD":/repo -w /repo \
            zricethezav/gitleaks:latest detect \
              --source . \
              --no-git \
              --report-format json \
              --report-path gitleaks.json || true
          test -s gitleaks.json || echo '[]' > gitleaks.json

      # Отчёт SARIF — для GitHub Security
      - name: Gitleaks → gitleaks.sarif
        run: |
          docker run --rm -v "$PWD":/repo -w /repo \
            zricethezav/gitleaks:latest detect \
              --source . \
              --no-git \
              --report-format sarif \
              --report-path gitleaks.sarif || true
          test -s gitleaks.sarif || echo '{"version":"2.1.0","runs":[]}' > gitleaks.sarif

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Upload gitleaks artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: |
            gitleaks.json
            gitleaks.sarif
          if-no-files-found: warn
          retention-days: 7

# ────────────────────────────────────────────────────────────────────────────────
# 5) Сборка Docker-образа и Trivy Image → trivy-image.sarif
# ────────────────────────────────────────────────────────────────────────────────
  build_image_scan:
    name: build_image_scan
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t "${IMAGE_NAME}" .
          docker image inspect "${IMAGE_NAME}" >/dev/null

      - name: Trivy image → trivy-image.sarif
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${TRIVY_CACHE_DIR}:/root/.cache/trivy" \
            aquasec/trivy:${TRIVY_VER} image \
              --format sarif \
              --output trivy-image.sarif \
              --no-progress \
              --timeout 10m \
              "${IMAGE_NAME}"

          test -s trivy-image.sarif || echo '{"version":"2.1.0","runs":[]}' > trivy-image.sarif

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Upload trivy-image.sarif (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif
          if-no-files-found: warn
          retention-days: 7

# ────────────────────────────────────────────────────────────────────────────────
# 6) Gate PRE DAST — проверяем, что артефакты на месте (ci/gate.sh pre)
# ────────────────────────────────────────────────────────────────────────────────
  gate_pre_dast:
    name: gate_pre_dast
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs_sbom, gitleaks, build_image_scan]
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Download ALL artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Normalize downloaded files to root
        run: |
          shopt -s globstar
          # переносим найденные нужные файлы в корень, если они лежат в подпапках
          for f in **/semgrep.sarif **/trivy-fs.sarif **/sbom.spdx.json **/gitleaks.json **/trivy-image.sarif; do
            [ -f "$f" ] && cp -f "$f" ./
          done
          ls -la

      - name: Gate PRE
        run: |
          bash ci/gate.sh pre

# ────────────────────────────────────────────────────────────────────────────────
# 7) DAST локально: поднимаем приложение, ZAP baseline + nuclei → отчёты
# ────────────────────────────────────────────────────────────────────────────────
  dast_local:
    name: dast_local
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create scan || true

      - name: Build app image (reuse)
        run: docker build -t "${IMAGE_NAME}" .

      - name: Run app on network
        run: |
          docker run -d --rm --name app --network scan -p 3000:3000 "${IMAGE_NAME}"
          # Ожидаем доступность
          for i in {1..60}; do
            if curl -fsS http://localhost:3000 >/dev/null; then
              echo "App is up"; break
            fi
            sleep 2
          done

      - name: ZAP baseline (local) → zap.html/zap.json
        env:
          TARGET: http://app:3000
        run: |
          mkdir -p "$PWD/zap"
          docker pull "${ZAP_IMAGE}"

          docker run --rm --network scan \
            -v "$PWD/zap:/zap/wrk" \
            "${ZAP_IMAGE}" \
            zap-baseline.py \
              -t "${TARGET}" \
              -r zap.html \
              -J zap.json \
              -m 3 \
              -I -d || true

          # fallback, если ZAP что-то не вывел
          [ -f zap/zap.html ] || echo "<html><body><h1>No ZAP report</h1></body></html>" > zap/zap.html
          [ -s zap/zap.json ] || echo '{}' > zap/zap.json

      - name: Nuclei (local) → nuclei.txt
        run: |
          docker run --rm --network scan projectdiscovery/nuclei:latest \
            -u http://app:3000 \
            -severity high,medium \
            -silent -o /tmp/nuclei.txt || true
          # забираем файл из контейнера через объем: nuclei нет тома, поэтому просто второй запуск с mount
          docker run --rm --network scan -v "$PWD/zap:/out" projectdiscovery/nuclei:latest \
            -u http://app:3000 \
            -severity high,medium \
            -silent -o /out/nuclei.txt || true
          [ -s zap/nuclei.txt ] || echo 'no findings' > zap/nuclei.txt

      - name: Stop app
        if: always()
        run: docker rm -f app || true

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-local
          path: zap/**
          if-no-files-found: warn
          retention-days: 7

      - name: Gate on DAST
        if: always()
        run: |
          # перемещаем в корень имена, которые ожидает gate.sh
          cp -f zap/zap.json ./zap.json || true
          cp -f zap/nuclei.txt ./nuclei.txt || true
          bash ci/gate.sh dast

