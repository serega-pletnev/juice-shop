name: devsecops-ci

'on':
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
      - master
      - main

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  packages: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Install & unit tests
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm test --if-present || true

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep SARIF
        run: |
          docker run --rm -v "${PWD}:/src" returntocorp/semgrep:latest \
            semgrep --config /src/ci/semgrep.yml --error --sarif -o /src/semgrep.sarif /src || true
      - name: Semgrep JSON
        run: |
          docker run --rm -v "${PWD}:/src" returntocorp/semgrep:latest \
            semgrep --config /src/ci/semgrep.yml --error --json -o /src/semgrep.json /src || true
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: semgrep.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: semgrep.json, path: semgrep.json }

  codeql:
    runs-on: ubuntu-latest
    permissions: { security-events: write }
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.codeql/codeql-config.yml
      - uses: github/codeql-action/analyze@v3

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks
        run: |
          docker run --rm -v "$PWD:/path" zricethezav/gitleaks:latest detect \
            --exit-code 0 -s /path -c /path/ci/gitleaks.toml -f json -r /path/gitleaks.json --no-git
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks.json, path: gitleaks.json }

  trivy_fs_sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS + SBOM
        run: |
          mkdir -p SBOM
          docker run --rm -v "$PWD:/src" aquasec/trivy:latest fs --config /src/ci/trivy.yaml \
            --scanners vuln,secret,misconfig --output /src/trivy-fs.sarif /src
          docker run --rm -v "$PWD:/work" anchore/syft:latest /work -o cyclonedx-json > SBOM/juice-shop.cdx.json
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-fs.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy-fs.sarif, path: trivy-fs.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: SBOM, path: SBOM/ }

  build_image_scan:
    runs-on: ubuntu-latest
    needs: [build_test, semgrep, gitleaks, trivy_fs_sbom, codeql]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t app-image:ci .
      - name: Trivy image scan
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$PWD:/work" \
            aquasec/trivy:latest \
            image --format sarif --severity CRITICAL,HIGH --ignore-unfixed \
            -o /work/trivy-image.sarif app-image:ci
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-image.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy-image.sarif, path: trivy-image.sarif }

  gate_pre_dast:
    runs-on: ubuntu-latest
    needs: [build_image_scan]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq
      - name: Security Gate (SAST/SCA/Secrets/Image)
        run: bash ci/gate.sh artifacts

  dast_local:
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - name: Create docker network
        run: docker network create scan
      - uses: actions/checkout@v4
      - name: Build again (cache)
        run: docker build -t app-image:ci .
      - name: Run app on network
        run: |
          docker run -d --name web --network scan -v ${{ github.workspace }}:/zap/wrk app-image:ci
          for i in {1..40}; do
            if docker run --rm --network scan -v ${{ github.workspace }}:/zap/wrk curlimages/curl:8.8.0 -sS http://web:3000 >/dev/null; then
              echo "app is up"; exit 0; fi; sleep 3;
          done
          echo "app did not start in time"; docker logs web; exit 1
      - name: ZAP baseline (local)
        run: |
          docker run --rm --network scan -v ${{ github.workspace }}:/zap/wrk -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t "http://web:3000" -r /zap/wrk/zap.html -J /zap/wrk/zap.json -m 5 -d -I
      - name: Nuclei (local)
        run: |
          docker run --rm --network scan -v ${{ github.workspace }}:/zap/wrk projectdiscovery/nuclei:latest \
            -u "http://web:3000" -severity critical,high -o nuclei.txt || true
      - uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            zap.html
            zap.json
            nuclei.txt
      - name: Gate on DAST
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' zap.json)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' zap.json)
          echo "ZAP High=$highs Medium=$meds"
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then echo "ZAP gate fail"; exit 1; fi
          if [ -s nuclei.txt ]; then echo "Nuclei findings present"; cat nuclei.txt; exit 1; fi
