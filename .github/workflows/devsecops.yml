name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# Нужны права для загрузки SARIF в Code Scanning и скачивания/загрузки артефактов
permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------
  # 1) БЫСТРЫЕ unit/lint проверки
  # ----------------------------
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install deps (uses lockfile)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json! Failing early so cache/ci are корректны."
            exit 1
          fi

      - name: Lint (best-effort)
        run: npm run lint || true

  # ----------------------------
  # 2) SEMGREP (SARIF + артефакт)
  # ----------------------------
  semgrep:
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v4

      - name: Install Semgrep
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install semgrep

      - name: Semgrep scan -> semgrep.sarif
        run: |
          semgrep --config auto --sarif --output semgrep.sarif --exclude node_modules || true
          # На всякий пожарный: пустой SARIF, если вдруг файл так и не появился
          if [ ! -s semgrep.sarif ]; then
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[]}' > semgrep.sarif
          fi

      - name: Upload semgrep.sarif (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

      - name: Upload semgrep to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # ----------------------------
  # 3) CODEQL (JS/TS)
  # ----------------------------
  codeql:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  # ----------------------------
  # 4) GITLEAKS (всегда даём gitleaks.json)
  # ----------------------------
  gitleaks:
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v4

      - name: Run gitleaks (docker) -> gitleaks.json
        shell: bash
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest detect \
            --no-banner -s /repo -f json -r /repo/gitleaks.json --redact || true
          # Гарантируем, что файл существует даже если находок нет
          if [ ! -s gitleaks.json ]; then echo "[]" > gitleaks.json; fi

      - name: Upload gitleaks.json (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks.json
          path: gitleaks.json
          if-no-files-found: warn

  # ----------------------------------------
  # 5) TRIVY FS + SBOM (SPDX) как артефакты
  # ----------------------------------------
  trivy_fs_sbom:
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS -> trivy-fs.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scanners: vuln,secret,misconfig
          format: sarif
          output: trivy-fs.sarif
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Upload trivy-fs.sarif (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

      - name: SBOM (Syft) -> sbom.spdx.json
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload sbom.spdx.json (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sbom.spdx.json
          path: sbom.spdx.json

  # ---------------------------------------------------
  # 6) СБОРКА ОБРАЗА + TRIVY IMAGE (как отдельный шаг)
  # ---------------------------------------------------
  build_image_scan:
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t juice-shop:ci .

      - name: Trivy IMAGE -> trivy-image.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: juice-shop:ci
          format: sarif
          output: trivy-image.sarif
          severity: HIGH,CRITICAL
          ignore-unfixed: true

      - name: Upload trivy-image.sarif (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  # ---------------------------------------------------
  # 7) ПРЕ-ГЕЙТ: проверяем, что все отчёты на месте
  # ---------------------------------------------------
  gate_pre_dast:
    runs-on: ubuntu-latest
    needs: [semgrep, gitleaks, trivy_fs_sbom, build_image_scan]
    steps:
      - uses: actions/checkout@v4

      - name: Download ALL artifacts from previous jobs
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: Show what we have
        run: ls -la

      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # В репозитории уже есть ci/gate.sh — используем его "pre" шаг
      - name: Gate PRE (verify artifacts exist & severities)
        run: bash ci/gate.sh pre

  # ---------------------------------------------------
  # 8) Локальный DAST: ZAP baseline + Nuclei, затем gate
  # ---------------------------------------------------
  dast_local:
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create scan

      - name: Build (cache) - in case образа нет
        run: docker build -t juice-shop:ci .

      - name: Run app on network
        run: |
          docker run -d --rm --name app --network scan -p 3000:3000 juice-shop:ci
          # небольшой вэйт, чтобы сервер поднялся
          for i in {1..30}; do
            curl -sSf http://localhost:3000 >/dev/null && break || sleep 2
          done

      - name: ZAP baseline (local) -> zap.json, zap.html
        run: |
          mkdir -p zap
          docker run --rm --network scan -v "$PWD/zap:/zap/wrk" ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://app:3000 -J zap.json -r zap.html -m 3 -d -I || true
          # перенесём в корень, чтобы gate нашёл
          mv zap/zap.json ./zap.json || true
          mv zap/zap.html ./zap.html || true

      - name: Nuclei (quick) -> nuclei.txt
        run: |
          docker run --rm --network scan -v "$PWD:/wrk" -w /wrk projectdiscovery/nuclei:latest \
            -silent -u http://app:3000 -o nuclei.txt || true
          # Пустой файл тоже норм — gate это учтёт
          if [ ! -f nuclei.txt ]; then touch nuclei.txt; fi

      - name: Gate on DAST
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          bash ci/gate.sh dast

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-artifacts
          path: |
            zap.json
            zap.html
            nuclei.txt

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app 2>/dev/null || true
          docker network rm scan 2>/dev/null || true

