name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps (prod+dev)
        run: |
          npm ci --omit=dev
          npm i --include=dev --no-audit --no-fund
      - name: Lint (best-effort)
        run: npm run lint || true

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep scan → semgrep.sarif
        run: |
          docker pull returntocorp/semgrep:latest
          docker run --rm -v "${GITHUB_WORKSPACE}:/src" \
            returntocorp/semgrep:latest semgrep scan \
              --config auto \
              --sarif -o /src/semgrep.sarif \
              --error || true
          ls -lh semgrep.sarif || true
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
      - name: Upload semgrep.sarif (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif
          if-no-files-found: warn

  trivy_fs_sbom:
    runs-on: ubuntu-latest
    needs: build_test
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS + SBOM → trivy-fs.sarif & sbom.spdx.json
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v "${GITHUB_WORKSPACE}:/src" -w /src aquasec/trivy:latest fs --timeout 10m \
            --format sarif --output /src/trivy-fs.sarif \
            --security-checks vuln,config,secret .
          docker run --rm -v "${GITHUB_WORKSPACE}:/src" -w /src aquasec/trivy:latest fs --timeout 10m \
            --format spdx-json --output /src/sbom.spdx.json .
          ls -lh trivy-fs.sarif sbom.spdx.json || true
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: sbom.spdx.json
          path: sbom.spdx.json

  build_image_scan:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t juice-shop:ci .
      - name: Trivy image → trivy-image.sarif
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${GITHUB_WORKSPACE}:/src" \
            aquasec/trivy:latest image \
              --format sarif --output /src/trivy-image.sarif \
              --timeout 10m \
              --severity MEDIUM,HIGH,CRITICAL \
              --scanners vuln,secret \
              juice-shop:ci
          ls -lh trivy-image.sarif || true
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  gate_pre_dast:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs_sbom, build_image_scan]
    steps:
      - uses: actions/checkout@v4
      - name: Download ALL artifacts from previous jobs
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Security Gate (SAST/SCA/Secrets/Image)
        run: |
          echo "Gate PRE: проверяем артефакты"
          ls -lh || true
          test -s semgrep.sarif
          test -s trivy-fs.sarif
          test -s trivy-image.sarif
          test -s sbom.spdx.json
          echo "OK"

  dast_local:
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - uses: actions/checkout@v4

      - name: Build app image (again on this runner)
        run: docker build -t juice-shop:ci .

      - name: Run app container
        run: |
          docker run -d --name web -p 3000:3000 juice-shop:ci
          sleep 3

      - name: Wait app readiness
        run: |
          for i in $(seq 1 60); do
            if curl -sf http://localhost:3000/ >/dev/null; then
              echo "app up"; exit 0; fi
            sleep 2
          done
          echo "app failed to start"; docker ps -a; exit 1

      # ⬇️ ВАЖНО: надёжный pull ZAP с Docker Hub + фолбэк на GHCR
      - name: ZAP Baseline (local) → zap.json & zap.html
        run: |
          set -e
          CANDIDATES=("zaproxy/zap2docker-stable:latest" "ghcr.io/zaproxy/zap2docker-stable:latest")
          IMG=""
          for c in "${CANDIDATES[@]}"; do
            if docker pull "$c"; then IMG="$c"; break; else echo "WARN: pull failed for $c"; fi
          done
          if [ -z "$IMG" ]; then echo "ERR: no ZAP image pulled"; exit 1; fi
          docker run --rm -v "${GITHUB_WORKSPACE}:/zap/wrk" "$IMG" \
            zap-baseline.py -t http://localhost:3000 \
              -m 1 -a -J zap.json -r zap.html -w zap.md || true
          echo "=== ZAP files ==="; ls -lh zap.* || true

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast
          path: |
            zap.json
            zap.html
            zap.md

      - name: Stop app
        if: always()
        run: docker rm -f web || true

  gate_on_dast:
    runs-on: ubuntu-latest
    needs: [dast_local]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dast
          path: .
      - name: Gate on DAST (ZAP)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          test -s zap.json
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' zap.json)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' zap.json)
          echo "ZAP High=$highs Medium=$meds"
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "ZAP gate fail"; exit 1; fi
          echo "DAST gate OK"

