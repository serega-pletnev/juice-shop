name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: ["*"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # нужно для upload-sarif

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: "20.x"
  IMAGE_TAG: app:${{ github.sha }}
  ZAP_NET: scan
  ZAP_TARGET: http://app:3000

jobs:
  # ---------- SAST: Semgrep ----------
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Semgrep внутри контейнера, пишем SARIF в корень воркспейса.
      - name: Run Semgrep -> semgrep.sarif (non-fatal)
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/src" semgrep/semgrep:latest \
            semgrep --config auto --sarif --output /src/semgrep.sarif --timeout 600 --error || true
          test -s semgrep.sarif || echo '{}' > semgrep.sarif

      - name: Upload SARIF (Semgrep) to GitHub Security
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Keep artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  # ---------- Secrets: Gitleaks ----------
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Gitleaks -> gitleaks.sarif & gitleaks.json (non-fatal)
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f sarif -r /repo/gitleaks.sarif --exit-code 0 || true
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f json  -r /repo/gitleaks.json  --exit-code 0 || true
          test -s gitleaks.sarif || echo '{}' > gitleaks.sarif

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: gitleaks.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: gitleaks.reports
          path: |
            gitleaks.sarif
            gitleaks.json
          if-no-files-found: warn

  # ---------- SCA/Secrets/Config на файловой системе ----------
  trivy_fs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Оффициальный action Trivy: стабильно пишет SARIF в указанный путь
      - name: Trivy FS -> trivy-fs.sarif (non-fatal)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH,MEDIUM,LOW
        continue-on-error: true

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: trivy-fs.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

  # ---------- Сборка образа и Trivy Image ----------
  image_scan:
    runs-on: ubuntu-latest
    needs: [trivy_fs]  # порядок не критичен, просто пример
    steps:
      - uses: actions/checkout@v4

      - name: Build app image
        run: |
          docker build -t $IMAGE_TAG .

      - name: Trivy Image -> trivy-image.sarif (non-fatal)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH,MEDIUM,LOW
        continue-on-error: true

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: trivy-image.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  # ---------- Локальный DAST (ZAP Baseline) и Gate ----------
  dast_local:
    runs-on: ubuntu-latest
    needs: [image_scan, semgrep, gitleaks, trivy_fs]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare network
        run: docker network create $ZAP_NET || true

      - name: Run app container
        run: |
          docker rm -f app || true
          docker build -t $IMAGE_TAG .
          docker run -d --name app --network $ZAP_NET -p 3000:3000 $IMAGE_TAG
          # Ждём готовности
          for i in {1..60}; do curl -fs "$ZAP_TARGET" >/dev/null && break || sleep 2; done

      - name: ZAP Baseline -> zap.json & zap.html (non-fatal, with fallback)
        continue-on-error: true
        run: |
          bash ci/zap-baseline.sh "$ZAP_NET" "$ZAP_TARGET"
          ls -l zap.json zap.html || true

      - name: Upload DAST artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: dast.zap
          path: |
            zap.json
            zap.html
          if-no-files-found: warn

      - name: Gate on DAST (fail if High>0 or Medium>5)
        run: bash ci/gate.sh

      - name: Cleanup
        if: ${{ always() }}
        run: |
          docker rm -f app || true
          docker network rm $ZAP_NET || true

