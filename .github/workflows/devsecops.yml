name: DevSecOps CI (SAST/SCA/Secrets/Image + DAST gates)

on:
  push:
    branches: [master, main]
  pull_request:

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run lint --if-present || true

  semgrep:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep scan -> semgrep.sarif
        run: |
          docker run --rm -e SEMGREP_SEND_METRICS=false \
            -v "$PWD:/src" -w /src returntocorp/semgrep:latest \
            semgrep --config p/ci --sarif -o /src/semgrep.sarif || true
          test -s semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  gitleaks:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks scan -> gitleaks.sarif
        run: |
          docker run --rm -v "$PWD:/repo" -w /repo zricethezav/gitleaks:latest \
            detect --source=/repo --format sarif --report-path /repo/gitleaks.sarif --exit-code 0 --redact
          test -s gitleaks.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS -> trivy-fs.sarif
        run: |
          docker run --rm -v "$PWD:/work" -w /work aquasec/trivy:latest \
            fs --scanners vuln,config,secret --format sarif -o /work/trivy-fs.sarif /work || true
          test -s trivy-fs.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

  image_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t app:test .
      - name: Trivy image -> trivy-image.sarif
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$PWD:/work" aquasec/trivy:latest \
            image --format sarif -o /work/trivy-image.sarif app:test || true
          test -s trivy-image.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  gate_pre_dast:
    needs: [semgrep, gitleaks, trivy_fs, image_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true
      - run: ls -l *.sarif || true
      - run: bash ci/gate.sh pre

  dast_local:
    needs: [gate_pre_dast, build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create network
        run: docker network create scan || true
      - name: Build app image
        run: docker build -t app:test .
      - name: Run app container
        run: docker run -d --rm --name juice --network scan -p 3000:3000 app:test
      - name: Wait readiness
        run: |
          for i in {1..60}; do
            if docker run --rm --network scan curlimages/curl:8.7.1 -fsS http://juice:3000/ >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          exit 1
      - name: ZAP Baseline -> zap.json, zap.html
        run: |
          docker run --rm --network scan -v "$PWD:/zap/wrk" owasp/zap2docker-stable \
            zap-baseline.py -t http://juice:3000 -J zap.json -r zap.html -d -I || true
          test -s zap.json || echo "{}" > zap.json
          test -s zap.html || echo "<html><body>No report</body></html>" > zap.html
      - uses: actions/upload-artifact@v4
        with:
          name: zap.json
          path: zap.json
      - uses: actions/upload-artifact@v4
        with:
          name: zap.html
          path: zap.html
      - name: Stop app
        if: always()
        run: |
          docker rm -f juice || true
          docker network rm scan || true

  gate_on_dast:
    needs: [dast_local]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true
      - run: ls -l
      - run: bash ci/gate.sh dast

