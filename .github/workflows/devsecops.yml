name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:

permissions:
  contents: read
  security-events: write   # для загрузки SARIF (Code Scanning)
  actions: read

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # --- 0. Базовая сборка/установка зависимостей проекта (быстрый smoke) ---
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install (clean, from lockfile)
        run: npm ci

      - name: Lint (best-effort)
        run: npm run lint --if-present || true

  # --- 1. Semgrep (SAST) -> semgrep.sarif ---
  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Semgrep scan (SARIF)
        run: |
          docker run --rm -v "$PWD:/src" semgrep/semgrep:latest \
            semgrep scan --config auto --error --sarif -o /src/semgrep.sarif || true
          ls -l semgrep.sarif

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload artifact (semgrep)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep.sarif
          if-no-files-found: error

  # --- 2. Gitleaks (Secrets) -> gitleaks.json ---
  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Gitleaks detect
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect --source=/repo --report-format=json --report-path=/repo/gitleaks.json --redact || true
          ls -l gitleaks.json

      - name: Upload artifact (gitleaks)
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.json
          if-no-files-found: error

  # --- 3. Trivy filesystem (vuln scan) + Syft SBOM ---
  trivy_fs_sbom:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS (SARIF)
        run: |
          docker run --rm -v "$PWD:/src" aquasec/trivy:latest \
            fs --security-checks vuln,config,secret --format sarif -o /src/trivy-fs.sarif /src || true
          ls -l trivy-fs.sarif

      - name: SBOM via Syft (SPDX JSON)
        run: |
          docker run --rm -v "$PWD:/src" anchore/syft:latest dir:/src -o spdx-json=/src/sbom.spdx.json
          ls -l sbom.spdx.json

      - name: Upload SARIF to Code Scanning (Trivy FS)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Upload artifacts (fs+sbom)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-and-sbom
          path: |
            trivy-fs.sarif
            sbom.spdx.json
          if-no-files-found: error

  # --- 4. CodeQL (JS) ---
  codeql:
    runs-on: ubuntu-latest
    needs: build_test
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3

  # --- 5. Build image + Trivy image scan (неблокирующий) ---
  build_image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image (app:ci)
        run: |
          docker build -t app:ci -f Dockerfile .

      - name: Trivy image (SARIF, non-fatal)
        run: |
          docker run --rm -v "$PWD:/out" aquasec/trivy:latest \
            image --format sarif -o /out/trivy-image.sarif app:ci || true
          ls -l trivy-image.sarif || true

      - name: Upload artifact (trivy-image) (if exists)
        if: hashFiles('trivy-image.sarif') != ''
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-sarif
          path: trivy-image.sarif

  # --- 6. Gate pre-DAST: проверяем, что артефакты SAST/SCA/Secrets на месте ---
  gate_pre_dast:
    runs-on: ubuntu-latest
    needs: [semgrep, gitleaks, trivy_fs_sbom, codeql, build_image_scan]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts (semgrep)
        uses: actions/download-artifact@v4
        with:
          name: semgrep-sarif

      - name: Download artifacts (gitleaks)
        uses: actions/download-artifact@v4
        with:
          name: gitleaks-report

      - name: Download artifacts (trivy fs + sbom)
        uses: actions/download-artifact@v4
        with:
          name: trivy-fs-and-sbom

      - name: Download artifacts (trivy image, optional)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: trivy-image-sarif
          path: .

      - name: PRE Gate — ensure required files exist
        run: |
          set -e
          ls -l || true
          for f in semgrep.sarif trivy-fs.sarif sbom.spdx.json gitleaks.json; do
            if [ ! -s "$f" ]; then
              echo "::error::Required artifact not found: $f"
              exit 1
            fi
          done
          echo "PRE Gate: OK"

  # --- 7. Local DAST (app in Docker, ZAP + Nuclei) + gate ---
  dast_local:
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create scan

      - name: Build app image (again for this runner)
        run: docker build -t app:ci -f Dockerfile .

      - name: Run app on network
        run: |
          docker run -d --rm --network scan --name app -p 3000:3000 app:ci
          # Ждём старта приложения
          for i in {1..60}; do
            if curl -fsS http://localhost:3000/ >/dev/null; then
              echo "App is up"
              break
            fi
            sleep 2
          done

      - name: ZAP baseline (local)
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm --network scan \
            -v "${{ github.workspace }}:/zap/wrk" \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://app:3000 -J zap.json -r zap.html -I -m 1
          ls -l zap.json zap.html

      - name: Nuclei (local)
        run: |
          docker pull projectdiscovery/nuclei:latest
          docker run --rm --network scan \
            -v "${{ github.workspace }}:/wrk" \
            projectdiscovery/nuclei:latest \
            -u http://app:3000 -o /wrk/nuclei.txt || true
          ls -l nuclei.txt

      - name: Gate on DAST
        run: |
          set -e
          sudo apt-get update -y && sudo apt-get install -y jq
          if [ ! -s zap.json ]; then
            echo "::error::zap.json not found — check ZAP run and volume mount"
            exit 1
          fi
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' zap.json)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' zap.json)
          echo "ZAP High=$highs Medium=$meds"
          # Порог (можно настроить)
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "::error::DAST gate failed (high>$((0)) or medium>5)"
            exit 1
          fi
          echo "DAST gate: OK"

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-artifacts
          path: |
            zap.json
            zap.html
            nuclei.txt

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app 2>/dev/null || true
          docker network rm scan 2>/dev/null || true

