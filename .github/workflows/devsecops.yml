name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci --omit=dev
      - run: node -v && npm -v

  semgrep:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep scan -> semgrep.sarif
        env:
          SEMGREP_SEND_METRICS: off
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep scan --config auto --exclude .git \
            --sarif --output /src/semgrep.sarif --no-error
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          vuln-type: os,library
          security-checks: vuln,secret,config
          exit-code: '0'
          arguments: --skip-dirs node_modules --timeout 10m
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs
          path: trivy-fs.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks -> gitleaks.sarif
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest detect \
            --no-banner --source=/repo \
            --report-format sarif --report-path /repo/gitleaks.sarif --exit-code 0
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: gitleaks.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: [build_test]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app:test .
      - name: Trivy image -> trivy-image.sarif
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:0.53.0 image --timeout 15m \
            --format sarif --output /tmp/trivy-image.sarif \
            --scanners vuln,secret app:test || true
          cp /tmp/trivy-image.sarif trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: trivy-image.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: [image_scan]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Build image if absent
        run: docker build -t app:test .
      - name: Create network
        run: docker network create scan || true
      - name: Run app
        run: docker run -d --rm --network scan --name app -p 3000:3000 app:test
      - name: Wait readiness
        run: |
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:3000/ >/dev/null; then exit 0; fi
            sleep 2
          done
          exit 1
      - name: ZAP Baseline -> zap.json & zap.html
        run: |
          docker run --rm --network scan -v "$PWD:/zap/wrk" owasp/zap2docker-stable \
            zap-baseline.py -t http://app:3000 -J zap.json -r zap.html -a -m 2 || true
      - name: Stop app and net
        if: always()
        run: |
          docker stop app || true
          docker network rm scan || true
      - uses: actions/upload-artifact@v4
        with:
          name: dast
          path: |
            zap.json
            zap.html

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, image_scan, dast_local]
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Gate
        run: |
          sudo apt-get update -y >/dev/null 2>&1
          sudo apt-get install -y jq >/dev/null 2>&1
          bash ci/gate.sh artifacts
