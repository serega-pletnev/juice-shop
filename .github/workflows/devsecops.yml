name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ "**" ]
  pull_request:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
      - name: Build
        run: npm run build --if-present

  semgrep:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Run Semgrep
        env:
          SEMGREP_SEND_METRICS: off
        run: |
          docker run --rm -v "$PWD:/src" semgrep/semgrep:1 \
            semgrep scan --config auto --sarif -o /src/semgrep.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: semgrep.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: semgrep_sarif, path: semgrep.sarif, retention-days: 3 }

  trivy_fs:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          scanners: vuln,secret
          vuln-type: os,library
          ignore-unfixed: false
          severity: CRITICAL,HIGH,MEDIUM,LOW
          exit-code: '0'
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-fs.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy_fs_sarif, path: trivy-fs.sarif, retention-days: 3 }

  gitleaks:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect --source=/repo --no-git --report-format sarif --report-path /repo/gitleaks.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: gitleaks.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks_sarif, path: gitleaks.sarif, retention-days: 3 }

  image_scan:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app:ci .
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:ci
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: false
          severity: CRITICAL,HIGH,MEDIUM,LOW
          exit-code: '0'
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-image.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy_image_sarif, path: trivy-image.sarif, retention-days: 3 }

  dast_local:
    needs: [build_test, image_scan]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Ensure image exists
        run: |
          docker image inspect app:ci >/dev/null 2>&1 || docker build -t app:ci .
      - name: Create network
        run: docker network create scan || true
      - name: Run app
        run: docker run -d --rm --name app --network scan -p 3000:3000 app:ci
      - name: Wait readiness
        run: bash ci/wait-for-http.sh http://localhost:3000 60
      - name: ZAP Baseline
        run: |
          docker run --rm --network scan -v "$PWD:/zap/wrk" ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://app:3000 -J /zap/wrk/zap.json -r /zap/wrk/zap.html -m 2 -I || true
      - uses: actions/upload-artifact@v4
        with: { name: zap_reports, path: "zap.*", if-no-files-found: ignore, retention-days: 3 }
      - name: Stop app and network
        if: always()
        run: |
          docker rm -f app >/dev/null 2>&1 || true
          docker network rm scan >/dev/null 2>&1 || true

  gate:
    needs: [semgrep, trivy_fs, gitleaks, image_scan, dast_local]
    runs-on: ubuntu-latest
    env:
      MAX_HIGH: "0"
      MAX_MEDIUM: "5"
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Gate
        run: bash ci/gate.sh ./artifacts "${MAX_HIGH}" "${MAX_MEDIUM}"

