name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
    branches: [ "*" ]
  workflow_dispatch:

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: "20.x"
  IMAGE_TAG: app:${{ github.sha }}
  ZAP_NET: scan
  ZAP_TARGET: http://app:3000

jobs:
  build_test:
    name: Build & unit/lint (best-effort)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps (prefer lock; fallback)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --omit=dev || npm ci
          else
            npm install --omit=dev || npm install
          fi

      - name: Typecheck / lint (best-effort)
        continue-on-error: true
        run: |
          npm run typecheck --if-present || true
          npm run lint --if-present || true
          npm run test --if-present || true

  semgrep:
    name: Semgrep (SARIF)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep -> semgrep.sarif
        # Semgrep возвращает 1 при находках; оставляем pipeline живым
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/src" semgrep/semgrep:latest \
            semgrep --config auto --sarif --output /src/semgrep.sarif --timeout 600 --error || true
          test -s semgrep.sarif || echo '{}' > semgrep.sarif

      - name: Upload SARIF to GitHub Security
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload semgrep.sarif (artifact)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif
          if-no-files-found: warn

  trivy_fs_sbom:
    name: Trivy FS + SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS -> trivy-fs.sarif
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/repo" aquasec/trivy:0.53.0 \
            fs --security-checks vuln,secret,config \
            --format sarif -o /repo/trivy-fs.sarif --exit-code 0 /repo
          test -s trivy-fs.sarif || echo '{}' > trivy-fs.sarif

      - name: SBOM via Syft -> sbom.spdx.json
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/work" anchore/syft:latest dir:/work -o spdx-json=/work/sbom.spdx.json || true

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: trivy-fs.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: sbom.spdx.json
          path: sbom.spdx.json
          if-no-files-found: warn

  gitleaks:
    name: Gitleaks (secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run gitleaks -> gitleaks.sarif & gitleaks.json
        continue-on-error: true
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f sarif -r /repo/gitleaks.sarif --exit-code 0 || true
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f json  -r /repo/gitleaks.json  --exit-code 0 || true
          test -s gitleaks.sarif || echo '{}' > gitleaks.sarif

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: gitleaks.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: gitleaks.reports
          path: |
            gitleaks.sarif
            gitleaks.json
          if-no-files-found: warn

  build_image_scan:
    name: Build Docker image + Trivy image scan
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build -t $IMAGE_TAG .

      - name: Trivy image -> trivy-image.sarif
        continue-on-error: true
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.53.0 \
            image --security-checks vuln,secret --ignore-unfixed \
            --format sarif -o /tmp/trivy-image.sarif --exit-code 0 $IMAGE_TAG || true
          docker cp "$(docker create --name tmpbox alpine:3.19 true)":/etc/issue /dev/null 2>/dev/null || true
          sudo cp /tmp/trivy-image.sarif ./trivy-image.sarif || true
          test -s trivy-image.sarif || echo '{}' > trivy-image.sarif

      - uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() }}
        with:
          sarif_file: trivy-image.sarif

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  gate_pre_dast:
    name: Gate PRE (check artifacts presence)
    runs-on: ubuntu-latest
    needs: [semgrep, gitleaks, trivy_fs_sbom, build_image_scan]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: ls -R ./artifacts || true

      - name: Pre-gate: ensure reports exist
        run: |
          set -e
          for f in semgrep.sarif gitleaks.sarif trivy-fs.sarif trivy-image.sarif; do
            if ! find ./artifacts -name "$f" -type f | grep -q .; then
              echo "::error file=$f::report not found"
              exit 1
            fi
          done
          echo "OK: all reports present"

  dast_local:
    name: DAST (local ZAP Baseline + gate)
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create $ZAP_NET || true

      - name: Build (cache) & run app on network
        run: |
          docker build -t $IMAGE_TAG .
          docker rm -f app || true
          docker run -d --name app --network $ZAP_NET -p 3000:3000 $IMAGE_TAG
          # простая проверка готовности
          for i in {1..60}; do curl -fs "$ZAP_TARGET" >/dev/null && break || sleep 2; done

      - name: ZAP Baseline (local) -> zap.json & zap.html
        # zap-baseline сам может вернуть код >0, сохраняем отчёты и решаем на gate
        continue-on-error: true
        run: |
          docker run --rm --network $ZAP_NET \
            -v "$PWD:/zap/wrk" ghcr.io/zaproxy/zaproxy:main \
            zap-baseline.py -t "$ZAP_TARGET" -m 5 -J zap.json -w zap.html -r zap.html || true
          ls -l zap.json zap.html || true

      - name: Upload DAST artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: dast.zap
          path: |
            zap.json
            zap.html
          if-no-files-found: warn

      - name: Gate on DAST (fail on High>0 or Medium>5)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' zap.json 2>/dev/null || echo 0)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' zap.json 2>/dev/null || echo 0)
          echo "ZAP High=$highs Medium=$meds"
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "::error::ZAP gate failed"
            exit 1
          fi
          echo "ZAP gate passed"

      - name: Stop app
        if: ${{ always() }}
        run: |
          docker rm -f app || true
          docker network rm $ZAP_NET || true

