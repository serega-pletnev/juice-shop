name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
    branches: [ "**" ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: read
  security-events: write

env:
  NODE_VERSION: "20"
  # глушим лишние npm-уведомления
  NPM_CONFIG_FUND: "false"
  CI: "true"

jobs:
  # ------------------------
  # 1) Сборка/быстрые проверки
  # ------------------------
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install (prefer prod-only; fallback to full)
        run: |
          npm config set audit false
          npm ci --omit=dev || npm ci
      - name: Lint (best-effort)
        run: npm run lint --if-present || true

  # ------------------------
  # 2) SAST (Semgrep)
  # ------------------------
  semgrep:
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Semgrep
        run: |
          python3 -m pip install --upgrade pip
          pip install semgrep

      - name: Semgrep scan (SARIF + JSON)
        run: |
          semgrep scan --config=p/ci --json  --output semgrep.json  || true
          semgrep scan --config=p/ci --sarif --output semgrep.sarif || true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: |
            semgrep.json
            semgrep.sarif

  # ------------------------
  # 3) CodeQL (SAST)
  # ------------------------
  codeql:
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: codeql

  # ------------------------
  # 4) Secrets (Gitleaks)
  # ------------------------
  gitleaks:
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install gitleaks
        run: |
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh \
            | bash -s -- -b /usr/local/bin

      - name: Scan repo for secrets
        run: |
          gitleaks detect --no-git -v \
            --report-format json --report-path gitleaks.json || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: gitleaks.json

  # ------------------------
  # 5) SCA/FS scan + SBOM
  # ------------------------
  trivy_fs_sbom:
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          security-checks: vuln,secret,misconfig
          hide-progress: true

      - name: Generate SBOM (SPDX JSON) via Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin
          syft dir:. -o spdx-json=sbom.spdx.json

      - name: Upload SARIF & SBOM
        uses: actions/upload-artifact@v4
        with:
          name: fs_and_sbom
          path: |
            trivy-fs.sarif
            sbom.spdx.json

      - name: Upload SARIF to GH
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  # ------------------------
  # 6) Build image & scan image (Trivy)
  # ------------------------
  build_image_scan:
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Enable Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NPM_CONFIG_FUND=false \
            --build-arg CI=true \
            -t juice-shop:ci .

      - name: Trivy image scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: juice-shop:ci
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          hide-progress: true

      - name: Upload image SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Upload artifact (image sarif)
        uses: actions/upload-artifact@v4
        with:
          name: image_scan
          path: trivy-image.sarif

  # ------------------------
  # 7) GATE перед DAST:
  #    скачать ВСЕ артефакты и убедиться, что они существуют
  # ------------------------
  gate_pre_dast:
    needs: [build_test, semgrep, codeql, gitleaks, trivy_fs_sbom]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download ALL artifacts from previous jobs
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: Security Gate (SAST/SCA/Secrets/Image)
        run: bash ci/gate.sh pre

  # ------------------------
  # 8) Локальный DAST (ZAP baseline + Nuclei) + Gate
  # ------------------------
  dast_local:
    needs: [gate_pre_dast, build_image_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create scan || true

      - name: Build (cache) app image
        run: docker build -t juice-shop:ci .

      - name: Run app on network
        run: |
          docker rm -f app || true
          docker run -d --name app --network scan -p 3000:3000 juice-shop:ci
          # ждём readiness приложения через контейнер curl
          docker run --rm --network scan curlimages/curl:8.8.0 \
            --retry 40 --retry-all-errors --retry-delay 3 --max-time 10 \
            http://app:3000/ || (docker logs app && exit 1)

      - name: ZAP baseline (JSON + HTML)
        run: |
          docker run --rm --network scan \
            -v "${{ github.workspace }}:/zap/wrk" \
            owasp/zap2docker-stable \
            zap-baseline.py \
              -t http://app:3000 \
              -J zap.json \
              -r zap.html \
              -x zap.xml || true

      - name: Nuclei scan
        run: |
          docker run --rm --network scan \
            -v "${{ github.workspace }}:/work" \
            projectdiscovery/nuclei:latest \
              -u http://app:3000 \
              -o /work/nuclei.txt \
              -severity critical,high,medium,low || true

      - name: Gate on DAST
        run: bash ci/gate.sh dast

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast_reports
          path: |
            zap.json
            zap.html
            zap.xml
            nuclei.txt

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app || true
          docker network rm scan || true

