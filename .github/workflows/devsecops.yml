name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:

# Права для выгрузки SARIF и чтения артефактов
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # 1) Сборка и быстрые проверки Node.js
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            **/package-lock.json
            package-lock.json

      - name: Install deps (CI if lock exists, fallback to install)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Lint (best-effort)
        run: npm run lint || true

      - name: Unit tests (best-effort)
        run: npm test || true

  # 2) Semgrep (SAST)
  semgrep:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Semgrep scan -> semgrep.sarif
        run: |
          docker run --rm -v "$PWD":/src semgrep/semgrep:latest \
            scan --config auto --quiet --sarif --output /src/semgrep.sarif || true
          ls -l semgrep.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  # 3) CodeQL (SAST от GitHub)
  codeql:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3

  # 4) Gitleaks (secrets)
  gitleaks:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks -> gitleaks.json
        run: |
          docker run --rm -v "$PWD":/repo zricethezav/gitleaks:latest \
            detect -s /repo -r /repo/gitleaks.json -f json || true
          ls -l gitleaks.json || true
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks.json
          path: gitleaks.json
          if-no-files-found: warn

  # 5) Trivy FS + SBOM
  trivy_fs_sbom:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS -> trivy-fs.sarif
        run: |
          docker run --rm -v "$PWD":/src -w /src aquasec/trivy:latest \
            fs --security-checks vuln,config,secret \
            --format sarif -o /src/trivy-fs.sarif /src || true
          ls -l trivy-fs.sarif || true

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: SBOM (SPDX JSON) -> sbom.spdx.json
        run: |
          docker run --rm -v "$PWD":/src -w /src aquasec/trivy:latest \
            sbom --format spdx-json -o /src/sbom.spdx.json /src || true
          ls -l sbom.spdx.json || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fs-and-sbom
          path: |
            trivy-fs.sarif
            sbom.spdx.json
          if-no-files-found: warn

  # 6) Build Docker image + Trivy image scan
  build_image_scan:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t app:ci -f Dockerfile .

      - name: Trivy image -> trivy-image.sarif
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --format sarif -o /tmp/trivy-image.sarif app:ci || true
          cp /tmp/trivy-image.sarif trivy-image.sarif || true
          ls -l trivy-image.sarif || true

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif
          if-no-files-found: warn

  # 7) Gate перед DAST: проверка, что нужные артефакты получены
  gate_pre_dast:
    needs: [build_test, semgrep, gitleaks, trivy_fs_sbom, codeql, build_image_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download ALL artifacts from previous jobs
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: List artifacts
        run: ls -la

      - name: Security Gate (SAST/SCA/Secrets/Image)
        run: |
          set -e
          missing=0
          for f in semgrep.sarif trivy-fs.sarif sbom.spdx.json trivy-image.sarif gitleaks.json; do
            if [ ! -s "$f" ]; then
              echo "::error::Не найден артефакт: $f (скачай через actions/download-artifact)"
              missing=1
            else
              echo "OK: $f"
            fi
          done
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

  # 8) DAST локально: ZAP + Nuclei + gate по результатам
  dast_local:
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create scan

      - name: Build app image (again)
        run: docker build -t app:ci -f Dockerfile .

      - name: Run app on network
        run: |
          docker run -d --rm --network scan --name app -p 3000:3000 app:ci
          # ждём готовности
          for i in {1..60}; do
            if curl -fsS http://localhost:3000/ >/dev/null; then
              echo "App is up"; break
            fi
            sleep 2
          done

      - name: Prepare writable output dir for DAST
        run: |
          mkdir -p dast
          chmod 777 dast
          ls -ld dast

      - name: ZAP baseline (local) -> dast/zap.json, dast/zap.html
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm --network scan -u 0:0 \
            -v "${{ github.workspace }}/dast:/zap/wrk" -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://app:3000 -J zap.json -r zap.html -I -m 1
          ls -l dast/zap.json dast/zap.html

      - name: Nuclei (local) -> dast/nuclei.txt
        run: |
          docker pull projectdiscovery/nuclei:latest
          docker run --rm --network scan \
            -v "${{ github.workspace }}/dast:/out" \
            projectdiscovery/nuclei:latest \
            -u http://app:3000 -o /out/nuclei.txt || true
          ls -l dast/nuclei.txt || true

      - name: Gate on DAST
        run: |
          set -e
          sudo apt-get update -y && sudo apt-get install -y jq
          test -s dast/zap.json || { echo "::error::dast/zap.json not found"; exit 1; }
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' dast/zap.json)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' dast/zap.json)
          echo "ZAP High=$highs Medium=$meds"
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "::error::DAST gate failed (high>0 or medium>5)"
            exit 1
          fi
          echo "DAST gate: OK"

      - name: Upload DAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-artifacts
          path: dast/*

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app 2>/dev/null || true
          docker network rm scan 2>/dev/null || true

