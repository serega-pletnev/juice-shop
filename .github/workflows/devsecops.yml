name: DevSecOps CI (SAST/SCA/Secrets/Image + Local DAST)

on:
  push:
  workflow_dispatch:

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write   # для загрузки SARIF в GitHub Security

env:
  NODE_VERSION: '20'

jobs:
  build_test:
    name: Build & unit/lint (best-effort)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: |
          npm ci
          npm config set fund false
          npm config set audit false

      - name: Lint (best-effort)
        continue-on-error: true
        run: npm run lint --if-present

      - name: Unit tests (best-effort)
        continue-on-error: true
        run: npm test --if-present -- -w=1

  semgrep:
    name: Semgrep (SARIF)
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          docker run --rm -v "$PWD:/src" -w /src semgrep/semgrep:latest \
            semgrep scan --config auto \
            --exclude .git --exclude node_modules \
            --timeout 0 --error \
            --sarif -o semgrep.sarif .

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload artifact (semgrep.sarif)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif
          if-no-files-found: error

  trivy_fs_sbom:
    name: Trivy FS + SBOM
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS (vuln+secrets) -> trivy-fs.sarif
        run: |
          docker run --rm -v "$PWD:/src" aquasec/trivy:latest fs /src \
            --format sarif -o /src/trivy-fs.sarif \
            --scanners vuln,secret \
            --severity HIGH,CRITICAL \
            --skip-dirs .git,node_modules

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Syft SBOM -> sbom.spdx.json
        run: |
          docker run --rm -v "$PWD:/work" anchore/syft:latest \
            dir:/work -o spdx-json=/work/sbom.spdx.json

      - name: Upload artifacts (FS SARIF & SBOM)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-and-sbom
          path: |
            trivy-fs.sarif
            sbom.spdx.json
          if-no-files-found: error

  gitleaks:
    name: Gitleaks (secrets)
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Run Gitleaks -> gitleaks.sarif & gitleaks.json
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo --no-git --redact \
            -f sarif -r /repo/gitleaks.sarif
          # JSON отчёт (удобно для архивов)
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo --no-git --redact \
            -f json -r /repo/gitleaks.json

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Upload artifacts (gitleaks)
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: |
            gitleaks.sarif
            gitleaks.json
          if-no-files-found: error

  build_image_scan:
    name: Build Docker image + Trivy image scan
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t juice:ci -f Dockerfile .

      - name: Trivy image -> trivy-image.sarif
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image juice:ci \
            --format sarif -o trivy-image.sarif \
            --severity HIGH,CRITICAL --ignore-unfixed --timeout 10m

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Upload artifact (trivy-image.sarif)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif
          if-no-files-found: error

  gate_pre_dast:
    name: Gate PRE (check artifacts presence)
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs_sbom, gitleaks, build_image_scan]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Check files exist
        run: |
          set -e
          ls -la artifacts || true
          req=(semgrep.sarif trivy-fs.sarif trivy-image.sarif gitleaks.sarif sbom.spdx.json)
          missing=0
          for f in "${req[@]}"; do
            if [ ! -s "artifacts/$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          [ "$missing" -eq 0 ] || { echo "Gate PRE failed"; exit 1; }

  dast_local:
    name: DAST (local ZAP Baseline + gate)
    runs-on: ubuntu-latest
    needs: [gate_pre_dast]

    steps:
      - uses: actions/checkout@v4

      # Собираем и запускаем приложение локально
      - name: Build app image
        run: docker build -t juice:ci -f Dockerfile .

      - name: Run app container
        run: |
          docker rm -f app || true
          docker run -d --name app -p 3000:3000 juice:ci

      - name: Wait app readiness
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:3000 >/dev/null; then exit 0; fi
            sleep 2
          done
          echo "App didn't become ready"
          docker logs app || true
          exit 1

      # Критично: используем правильный публичный образ ZAP
      - name: Pre-pull ZAP
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: ZAP Baseline (local) -> zap.json & zap.html
        env:
          TARGET: http://localhost:3000
        run: |
          set -e
          mkdir -p "$GITHUB_WORKSPACE/zap"
          docker run --rm --network host \
            -v "$GITHUB_WORKSPACE:/zap/wrk" \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "$TARGET" -m 1 -I \
              -r zap.html -J zap.json
          ls -la zap.html zap.json

      - name: Gate on DAST (High>0 or Medium>5 => fail)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' zap.json)
          meds=$(jq  '[.site[].alerts[] | select(.riskcode=="2")] | length' zap.json)
          echo "ZAP High=$highs Medium=$meds"
          if [ "$highs'0" != "0" ]; then highs=$highs; fi
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "DAST gate failed"; exit 1;
          fi

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-local
          path: |
            zap.html
            zap.json
          if-no-files-found: error

